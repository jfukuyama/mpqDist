[{"path":"https://jfukuyama.github.io/mpqDist/LICENSE.html","id":null,"dir":"","previous_headings":"","what":"MIT License","title":"MIT License","text":"Copyright (c) 2025 mpqDist authors Permission hereby granted, free charge, person obtaining copy software associated documentation files (“Software”), deal Software without restriction, including without limitation rights use, copy, modify, merge, publish, distribute, sublicense, /sell copies Software, permit persons Software furnished , subject following conditions: copyright notice permission notice shall included copies substantial portions Software. SOFTWARE PROVIDED “”, WITHOUT WARRANTY KIND, EXPRESS IMPLIED, INCLUDING LIMITED WARRANTIES MERCHANTABILITY, FITNESS PARTICULAR PURPOSE NONINFRINGEMENT. EVENT SHALL AUTHORS COPYRIGHT HOLDERS LIABLE CLAIM, DAMAGES LIABILITY, WHETHER ACTION CONTRACT, TORT OTHERWISE, ARISING , CONNECTION SOFTWARE USE DEALINGS SOFTWARE.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"introduction","dir":"Articles","previous_headings":"","what":"Introduction","title":"Interactive plot tutorial","text":"vignette, show use MPQ distance family investigate patterns beta diversity. illustrate tool, analyze dataset collected Alwyn Gentry way back . analysis based version dataset David Zeleny posted anadat-r repository. phylogeny built taxonomic information using S.PhyloMaker, higher-order taxonomic information inferred using taxonlookup. good deal data cleaning, choices made can seen script data-raw/gentry.R package.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"seting-up-and-transformations","dir":"Articles","previous_headings":"","what":"Seting up and transformations","title":"Interactive plot tutorial","text":"start loading packages need analysis loading gentry data, version available phyloseq object. object includes counts species observed sites, phylogenetic taxonomic information species, information (latitude, longitude, elevation, precipitation) sites. apply started log transform counts. show analysis raw data relative abundance data, believe log transformation generally beneficial. discussed detail paper, two primary reasons . First, ratios tend comparable differences abundance data. Second, counts tend skewed distribution, results distances involving sites high abundances specific species large. patterns tend log-transformed vs. raw data, values stable resulting patterns easier see log transformation. apply started log transform abundances show distributions raw log-transformed abundances. transformed abundances still skewed, lesser extent raw abundances. plot shows distribution non-zero abundances. fraction abundances 0 99%. Distributions raw transformed abundances","code":"library(ape) library(mpqDist) library(plotly) library(phyloseq) library(tidyverse) library(viridis) library(plotly) library(fields) library(compositions) data(gentry) gentry #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 585 taxa and 197 samples ] #> sample_data() Sample Data:       [ 197 samples by 4 sample variables ] #> tax_table()   Taxonomy Table:    [ 585 taxa by 4 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 585 tips and 349 internal nodes ] mean(otu_table(gentry) == 0) #> [1] 0.990325 gentry_log = gentry otu_table(gentry_log) = otu_table(clr(1 + otu_table(gentry)), taxa_are_rows = FALSE) abundance_df = data.frame(abundances = c(otu_table(gentry), otu_table(gentry_log)),                           type = rep(c(\"raw\", \"transformed\"), each = ntaxa(gentry) * nsamples(gentry))) ggplot(subset(abundance_df, abundances > 0)) + geom_histogram(aes(x = abundances), bins = 100) +     facet_wrap(~ type, scales = \"free_x\")"},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"computing-the-distances","dir":"Articles","previous_headings":"","what":"Computing the distances","title":"Interactive plot tutorial","text":"get_mpq_distances function compute full range MPQr distances, r taking values 0 1. r = 0 corresponds standard Euclidean distance, small values r can interpreted measuring “terminal” phylogenetic dissimilarity, large values r can interpreted measuring “basal” phylogenetic dissimilarity. first argument matrix (something inherits matrix, like otu_table object ). second argument phylogenetic tree class phylo. can specify set values r compute like. don’t specify anything, default take range 101 values 0 1 spaced closely near 0 1 farther apart middle. good theoretical reason , worked well examples looked .","code":"distances = get_mpq_distances(otu_table(gentry_log), phy_tree(gentry_log))"},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"making-an-interactive-plot","dir":"Articles","previous_headings":"","what":"Making an interactive plot","title":"Interactive plot tutorial","text":"easiest visualize family distances animated plot. package includes helper functions allow user make couple different kinds plots gives templates allow user make custom versions ones included suitable.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"plot-distance-to-a-reference-set","dir":"Articles","previous_headings":"Making an interactive plot","what":"Plot distance to a reference set","title":"Interactive plot tutorial","text":"first kind plot supported one shows distance individual sample set “reference” samples. sort plot use , example, samples collected sites along river wanted visualize distance site reference site one end river. function computes called plot_dist_to_reference_samples. required arguments physeq: phyloseq object containing species abundances site, phylogenetic tree describing species, sample data matrix information sites. reference_samples: vector containing either names indices reference sites. x_variable: string giving name variable plot x-axis. example, code gives us plot point corresponds site, position y-axis corresponds average distance site sites near equator, position x-axis corresponds latitude. function also allows extra aesthetics passed ggplot building plot. example, want points colored Elevation, specify color = \"Elevation\" plot_dist_to_reference_samples. plot built using aes_string ggplot, aesthetics geom_point understands can specified way. Finally, want able customize plot fully, option function return ggplot object can turned animated plot calling ggplotly function object. advantage way things ggplot object can modified made animated plot, allowing customization. example, wanted change color scale, reverse x axis, add loess smoother, follows:","code":"equatorial_samples = sample_names(gentry_log)[which(sample_data(gentry_log)$Lat >= -10 & sample_data(gentry_log)$Lat <= 10)] plot_dist_to_reference_samples(physeq = gentry_log, reference_samples = equatorial_samples,                                x_variable = \"Lat\") plot_dist_to_reference_samples(physeq = gentry_log, reference_samples = equatorial_samples,                                x_variable = \"Lat\", color = \"Elev\", size = \"Precip\") p = plot_dist_to_reference_samples(physeq = gentry_log, reference_samples = equatorial_samples,                                    x_variable = \"Lat\", color = \"Elev\", return_ggplot = TRUE) +     stat_smooth(aes(frame = frame), se = FALSE) +      scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"plot-all-pairs-of-distances","dir":"Articles","previous_headings":"Making an interactive plot","what":"Plot all pairs of distances","title":"Interactive plot tutorial","text":"Another kind plot can useful one difference pair sites plotted. standard one point pair samples, plot MPQr distance vertical axis geographical distance horizontal axis. make sort plot, can use function plot_all_pairs. function takes following arguments: phy: phyloseq object, plot_dist_to_reference_samples. sample_distances: Either matrix object class dist containing geographic distances samples. plot_all_pairs assumes samples objects order samples phy. return_ggplot: Optional argument return ggplot object instead plotting ggplotly. default return_ggplot FALSE. Since number pairs distances grows square number sites, takes long time compute pairs distances dataset. therefore restrict just sites Eastern North America. code block shows locations sites dataset Eastern North American subset marked.  Next, compute distances sites (case, using rdist.earth, computes great circle distances), use distances input plot_all_pairs. case, plot_all_pairs called return_ggplot = TRUE, returns ggplot object allows add smoother. Finally, calling ggplotly(p) creates interactive plot.","code":"sample_data(gentry_log)$ena_subset = sample_data(gentry_log)$Lat > 25 & sample_data(gentry_log)$Long < 0 & sample_data(gentry_log)$Lat < 50 ggplot(sample_data(gentry_log)) +     borders(\"world\", colour = \"gray70\", fill = \"gray90\") +     geom_point(aes(x = Long, y = Lat, shape = ena_subset, color = Elev)) + coord_fixed(1.3) gentry_log_ena_subset = subset_samples(gentry_log, ena_subset) greatcircle_sample_distances = rdist.earth(as.matrix(sample_data(gentry_log_ena_subset)[,c(\"Long\", \"Lat\")])) p = plot_all_pairs(gentry_log_ena_subset, greatcircle_sample_distances, return_ggplot = TRUE) p = p + stat_smooth(aes(frame = frame), se = FALSE) ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"helper-functions-for-custom-plots","dir":"Articles","previous_headings":"Making an interactive plot","what":"Helper functions for custom plots","title":"Interactive plot tutorial","text":"package also includes helper functions allow customization, since interactive plots based ggplotly, knowledge ggplotly works necessary use functions. Briefly, convert standard ggplot2 plot animated plot ggplotly, modify plotting data frame extra column specifies “frame” animation, add part aesthetic mapping (e.g. aes(frame = frame)) ggplot, call ggplotly function resulting ggplot object. details, see ggplotly documentation animations.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"the-make_animation_df-function","dir":"Articles","previous_headings":"Making an interactive plot > Helper functions for custom plots","what":"The make_animation_df function","title":"Interactive plot tutorial","text":"make_animation_df can help make sort data frame. first argument output get_mpq_distances (list elements distances r), second argument function takes single distance object returns data frame variables needed make one frame animation. Extra arguments can passed function makes data frame necessary. function applied elements distances slot output get_mpq_distances, resulting data frames bound together, column added indicating frame animation (one frame per value r). data frame created, user can make animated plot adding frame = frame aesthetic specification ggplot use static plot. Calling ggplotly resulting ggplot object make animated plot.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"function-to-create-plotting-variables","dir":"Articles","previous_headings":"Making an interactive plot > Helper functions for custom plots","what":"Function to create plotting variables","title":"Interactive plot tutorial","text":"code block , show example creating data frame need make interactive plot. make_animation_df function last line block takes first argument mpq_distances (output get_mpq_distances function). second argument function, get_avg_distances_to_set. get_avg_distances_to_set function turn three arguments, given final three arguments make_animation_df function passes along get_avg_distances_to_set. case, inside make_animation_df function, call get_avg_distances_to_set(nmv, equatorial_samples, sample_data(gentry_log)). Finally, animation_df data frame, can make animated plot. start making p, ggplot object, specifies sort plot want value r. aes specification, add frame = frame, make plot scroll different values r. Finally call ggplotly p make interactive plot.","code":"equatorial_samples = sample_names(gentry_log)[which(sample_data(gentry_log)$Lat >= -10 & sample_data(gentry_log)$Lat <= 10)] nmv = get_null_mean_and_variance(gentry_log) mpq_distances = get_mpq_distances(otu_table(gentry_log), phy_tree(gentry_log)) animation_df = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = nmv, equatorial_samples, sample_data(gentry_log)) p = ggplot(aes(x = Lat, y = avg_dist, color = Elev), data = animation_df) +     geom_point(aes(frame = frame)) +     geom_hline(aes(yintercept = null_mean, frame = frame)) +     geom_hline(aes(yintercept = null_mean - 2 * null_sd, frame = frame)) +     geom_hline(aes(yintercept = null_mean + 2 * null_sd, frame = frame)) +     stat_smooth(aes(frame = frame), se = FALSE, method = \"gam\") +     scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using formula = 'y ~ s(x, bs = \"cs\")'"},{"path":"https://jfukuyama.github.io/mpqDist/articles/gentry.html","id":"code-to-create-plots-in-manuscript","dir":"Articles","previous_headings":"","what":"Code to create plots in manuscript","title":"Interactive plot tutorial","text":"following code makes plot manuscript, comparing MPQr distances , Bray-Curtis, distances computed agglomerated species counts.","code":"mpq_distances = get_mpq_distances(otu_table(gentry_log), phy_tree(gentry_log))  ## compute Bray-Curtis dissimilarity on untransformed data mpq_distances$distances[[\"bray\"]] =  distance(gentry, method = \"bray\") mpq_distances$r = c(mpq_distances$r, \"bray\") ## agglomerate the untransformed data to order level, then clr-transform the agglomerated data gentry_order_glom = tax_glom(gentry, taxrank = \"order\") gentry_log_order_glom = gentry_order_glom otu_table(gentry_log_order_glom) = otu_table(clr(otu_table(gentry_order_glom) + 1), taxa_are_rows = FALSE) ## ## agglomerate the untransformed data to order level, then clr-transform the agglomerated data gentry_group_glom = tax_glom(gentry, taxrank = \"group\") gentry_log_group_glom = gentry_group_glom otu_table(gentry_log_group_glom) = otu_table(clr(otu_table(gentry_group_glom) + 1), taxa_are_rows = FALSE)  ## compute Euclidean distances on the clr-transformed agglomerated data mpq_distances$distances[[\"order_glom\"]] = dist(otu_table(gentry_log_order_glom)) mpq_distances$r = c(mpq_distances$r, \"order_glom\") mpq_distances$distances[[\"group_glom\"]] = dist(otu_table(gentry_log_group_glom)) mpq_distances$r = c(mpq_distances$r, \"group_glom\")  ## we will compare to the northern temperate samples temperate_samples = sample_names(gentry_log)[which(sample_data(gentry_log)$Lat >= 23.5 & sample_data(gentry_log)$Lat <= 66.5)]   ## this is a roundabout way of doing things, but make_animation_df ## here sets up the data for plotting for the MPQr distances + Bray ## Curtis + Euclidean distance on agglomerated data. I will use a subset of it to plot later animation_df = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = NULL, temperate_samples, sample_data(gentry_log))  ## I will be plotting mpqr distances with r = 0, 1, .7 + bray-curtis + Euclidean distance on two levels of agglomeration mid_r = \"0.712889645782536\" animation_df_sub = subset(animation_df, frame %in% c(mid_r, \"0\", \"1\", \"bray\", \"order_glom\", \"group_glom\")) ## this data frame will allow me to plot averages in 15-degree-of-latitude bins animation_df_summarised = animation_df_sub |>     mutate(latitude_bin = round(Lat / 15) * 15) |>     group_by(frame, latitude_bin) |> summarise(mean_in_bin = mean(avg_dist), se_in_bin = sd(avg_dist) / sqrt(length(avg_dist))) #> `summarise()` has grouped output by 'frame'. You can override using the #> `.groups` argument. ## making frame into an ordered factor so that the facots are plotted in the order I want animation_df_sub$frame = factor(animation_df_sub$frame,                                 levels = c(\"0\", mid_r, \"1\", \"bray\", \"order_glom\", \"group_glom\"),                                 ordered = TRUE) animation_df_summarised$frame = factor(animation_df_summarised$frame,                                        levels = c(\"0\", mid_r, \"1\", \"bray\", \"order_glom\", \"group_glom\"),                                        ordered = TRUE)  ## to do custom facet labels frame_labels <- c(\"0\" = \"r = 0\",                   mid_r = paste(\"r = \", round(as.numeric(mid_r), digits = 2), sep = \"\"),                   \"1\" = \"r = 1\",                   \"bray\" = \"Bray-Curtis\",                   \"order_glom\" = \"Glommed to order\",                   \"group_glom\" = \"Glommed to phylum\") names(frame_labels)[2] = mid_r #pdf(\"gentry-latitudinal-distance.pdf\", width = 7, height = 5) ggplot(data = animation_df_sub) +     geom_point(aes(x = Lat, y = avg_dist), size = .8, color = 'gray', pch = 1) +     geom_errorbar(aes(x = latitude_bin,                       ymin = mean_in_bin - 2 * se_in_bin,                       ymax = mean_in_bin + 2 * se_in_bin),                   data = animation_df_summarised,                   width = 6) +     annotate(\"rect\",            xmin = 23.5, xmax = 66.5,   # x-range to shade            ymin = -Inf, ymax = Inf,  # full y-range            alpha = 0.2, fill = \"blue\") +      geom_point(aes(x = latitude_bin, y= mean_in_bin),                data = animation_df_summarised) +     geom_line(aes(x = latitude_bin, y= mean_in_bin),                data = animation_df_summarised) +     scale_x_reverse(breaks = seq(60, -40, by = -20)) +     xlab(\"Latitude\") + ylab(\"Average distance to northern temperate sites\")+     facet_wrap( ~ frame, scales = \"free_y\", ncol = 3,                labeller = labeller(.default = frame_labels)) #dev.off()"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Simulation examples for MPQ distances","text":"","code":"library(ape) library(mpqDist) library(plotly) #> Loading required package: ggplot2 #>  #> Attaching package: 'plotly' #> The following object is masked from 'package:ggplot2': #>  #>     last_plot #> The following object is masked from 'package:stats': #>  #>     filter #> The following object is masked from 'package:graphics': #>  #>     layout library(phyloseq) library(tidyverse) #> ── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ── #> ✔ dplyr     1.1.4     ✔ readr     2.1.5 #> ✔ forcats   1.0.0     ✔ stringr   1.5.1 #> ✔ lubridate 1.9.4     ✔ tibble    3.2.1 #> ✔ purrr     1.0.4     ✔ tidyr     1.3.1 #> ── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ── #> ✖ dplyr::filter() masks plotly::filter(), stats::filter() #> ✖ dplyr::lag()    masks stats::lag() #> ✖ dplyr::where()  masks ape::where() #> ℹ Use the conflicted package (<http://conflicted.r-lib.org/>) to force all conflicts to become errors library(viridis) #> Loading required package: viridisLite library(phangorn) #>  #> Attaching package: 'phangorn' #>  #> The following object is masked from 'package:plotly': #>  #>     add_boxplot library(patchwork) library(treeDA) library(ggbrace) set.seed(0) data(gentry) gentry #> phyloseq-class experiment-level object #> otu_table()   OTU Table:         [ 585 taxa and 197 samples ] #> sample_data() Sample Data:       [ 197 samples by 4 sample variables ] #> tax_table()   Taxonomy Table:    [ 585 taxa by 4 taxonomic ranks ] #> phy_tree()    Phylogenetic Tree: [ 585 tips and 349 internal nodes ]"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"simulations","dir":"Articles","previous_headings":"","what":"Simulations","title":"Simulation examples for MPQ distances","text":"’re going test whether null means variances look right. , generate “OTU tables” independent normal random variables, potentially different standard deviations. ’ll use gentry data skeleton (tree, number samples sites, standard deviations species look changing standard deviations).","code":"sim_homo = gentry sim_hetero = gentry n = nsamples(gentry) p = ntaxa(gentry) sds = apply(log(1 + otu_table(gentry)), 2, sd) sim_homo_matrix = matrix(rnorm(n = n * p), nrow = n, ncol = p) rownames(sim_homo_matrix) = sample_names(gentry) colnames(sim_homo_matrix) = taxa_names(gentry) sim_hetero_matrix = sweep(sim_homo_matrix, MARGIN = 2, STATS = sds, FUN = '*') otu_table(sim_homo) = otu_table(sim_homo_matrix, taxa_are_rows = FALSE) otu_table(sim_hetero) = otu_table(sim_hetero_matrix, taxa_are_rows = FALSE)"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"homoskedastic-case","dir":"Articles","previous_headings":"Simulations","what":"Homoskedastic case","title":"Simulation examples for MPQ distances","text":"","code":"base_sample = 1 nmv = get_null_mean_and_variance(sim_homo) mpq_distances = get_mpq_distances(otu_table(sim_homo), phy_tree(sim_homo)) animation_df = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = nmv, base_sample, sample_data(sim_homo)) p = ggplot(aes(x = Lat, y = avg_dist, color = Elev), data = animation_df) +     geom_point(aes(frame = frame)) +     geom_hline(aes(yintercept = null_mean, frame = frame)) +     geom_hline(aes(yintercept = null_mean - 2 * null_sd, frame = frame)) +     geom_hline(aes(yintercept = null_mean + 2 * null_sd, frame = frame)) +     stat_smooth(aes(frame = frame), se = FALSE) +     scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' p = ggplot(aes(x = Lat, y = avg_dist, color = Elev), data = animation_df) +     geom_point(aes(frame = frame)) +     geom_hline(aes(yintercept = median, frame = frame)) +     geom_hline(aes(yintercept = upper, frame = frame)) +     geom_hline(aes(yintercept = lower, frame = frame)) +     stat_smooth(aes(frame = frame), se = FALSE) +     scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"heteroskedastic-case","dir":"Articles","previous_headings":"Simulations","what":"Heteroskedastic case","title":"Simulation examples for MPQ distances","text":"","code":"base_sample = 1 nmv = get_null_mean_and_variance(sim_hetero) mpq_distances = get_mpq_distances(otu_table(sim_hetero), phy_tree(sim_hetero)) animation_df = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = nmv, base_sample, sample_data(sim_hetero)) p = ggplot(aes(x = Lat, y = avg_dist, color = Elev), data = animation_df) +     geom_point(aes(frame = frame)) +     geom_hline(aes(yintercept = null_mean, frame = frame)) +     geom_hline(aes(yintercept = null_mean - 2 * null_sd, frame = frame)) +     geom_hline(aes(yintercept = null_mean + 2 * null_sd, frame = frame)) +     stat_smooth(aes(frame = frame), se = FALSE) +     scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x' p = ggplot(aes(x = Lat, y = avg_dist, color = Elev), data = animation_df) +     geom_point(aes(frame = frame)) +     geom_hline(aes(yintercept = median, frame = frame)) +     geom_hline(aes(yintercept = upper, frame = frame)) +     geom_hline(aes(yintercept = lower, frame = frame)) +     stat_smooth(aes(frame = frame), se = FALSE) +     scale_x_reverse() +     scale_color_viridis() ggplotly(p) #> `geom_smooth()` using method = 'loess' and formula = 'y ~ x'"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"non-null-distributions","dir":"Articles","previous_headings":"Simulations","what":"Non-null distributions","title":"Simulation examples for MPQ distances","text":"two-gradient simulation described paper:","code":"make_anticorrelated_noise <- function(n, tr) {     Q = vcv(tr)     p = ncol(Q)     Qeig = eigen(Q)     D = Qeig$values     D[1:(p/2)] = 0     D = D / sum(D)     D = diag(D)     E = matrix(rnorm(n * p), nrow = n, ncol = p)     E %*% sqrt(D) %*% t(Qeig$vectors) }   set.seed(0) p = 300 n = 100 tr = rtree(p) alt = sample(c(-1, 1), n, replace = TRUE) precip = sample(c(-1, 1), n, replace = TRUE)  phy_big = 1:p %in% Descendants(tr)[[469]] phy_small_u = 1:p %in% Descendants(tr)[[503]] phy_small_d = 1:p %in% Descendants(tr)[[529]] M = .5 * outer(alt, phy_big) + outer(precip, phy_small_u) - outer(precip, phy_small_d) X = M + rnorm(n = n * p, mean = 10, sd = .75) + p * .25 * make_anticorrelated_noise(n, tr) colnames(X) = tr$tip.label two_effect_sim = phyloseq(otu_table(X, taxa_are_rows = FALSE), phy_tree(tr), sample_data(data.frame(alt = alt, precip = precip))) #nmv = get_null_mean_and_variance(two_effect_sim) mpq_distances = get_mpq_distances(otu_table(two_effect_sim), phy_tree(two_effect_sim)) animation_df_alt = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = nmv, base_sample = which.min(alt), sample_data(two_effect_sim)) animation_df_precip = make_animation_df(mpq_distances, get_avg_distances_to_set, means_and_vars = nmv, base_sample = which.min(alt), sample_data(two_effect_sim)) ## p1 = ggplot(aes(x = factor(alt), y = avg_dist), data = animation_df_alt) + ##     geom_boxplot(aes(frame = frame)) ## ggplotly(p1)  ## p3 = ggplot(aes(x = factor(precip), y = avg_dist), data = animation_df_precip) + ##     geom_boxplot(aes(frame = frame)) ## ggplotly(p3) math_labels <- c(   \"0\" = \"r = 0\",   \"0.5\" = \"r = .5\",   \"1\" = \"r = 1\" ) p1 = ggplot(subset(animation_df_alt, (frame %in% c(0,1) | (frame >= .49 & frame <= .51)) & avg_dist > 0)) +     geom_boxplot(aes(x = factor(alt), y = avg_dist)) +     facet_wrap(~ as.factor(frame), scales = \"free_y\", labeller = labeller(.default = math_labels)) +     scale_x_discrete(breaks = c(-1, 1), labels = c(\"low\", \"high\")) +     xlab(\"Altitude\") p2 = ggplot(subset(animation_df_precip, (frame %in% c(0,1) | (frame >= .49 & frame <= .51)) & avg_dist > 0)) +     geom_boxplot(aes(x = factor(precip), y = avg_dist)) +     facet_wrap(~ as.factor(frame), scales = \"free_y\", labeller = labeller(.default = math_labels)) +     scale_x_discrete(breaks = c(-1, 1), labels = c(\"wet\", \"dry\")) +     xlab(\"Moisture\") h_patch <- p1 / p2 & ylab(NULL) & theme(plot.margin = margin(5.5, 5.5, 5.5, 2)) #pdf(\"two-factor-sim.pdf\", width = 6, height = 4) wrap_elements(h_patch) +   labs(tag = \"MPQr distance to reference sample\") +   theme(     plot.tag = element_text(size = rel(1), angle = 90),     plot.tag.position = \"left\"   ) #dev.off()"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"more-systematic-and-in-the-tree-basis","dir":"Articles","previous_headings":"Simulations","what":"More systematic, and in the tree basis","title":"Simulation examples for MPQ distances","text":"","code":"convert_to_tree_basis <- function(mu, Qeig) {     mutilde <- t(Qeig$vectors)%*% mu }  compare_to_null_tree_basis <- function(mutilde, r, d_noise, Qeig) {     dr = mpqDist:::get_dr(Qeig, r)     w = dr * d_noise     exp_val = t(mutilde * dr) %*% mutilde     variance = 2 * sum(w^2)     return(exp_val / sqrt(variance)) }  get_maximizing_r <- function(mutilde, d_noise, Qeig, rvec = mpqDist:::r_transform(0:100/100)) {     ratios = sapply(rvec, function(r) compare_to_null_tree_basis(mutilde, r, d_noise, Qeig))     return(rvec[which.max(ratios)]) } p = ntaxa(gentry) Q = vcv(phy_tree(gentry)) Qeig = eigen(Q) best_r_vec = numeric(p) for(i in 1:p) {     mutilde = rep(0, p)     mutilde[i] = 1     ##d_noise = c(rep(0, p/2), rep(1, p/2)) + .01     ##d_noise = Qeig$values^(-2) / sum(Qeig$values^(-2))     d_noise = rep(1, p)     d_noise = d_noise / sum(d_noise)     best_r_vec[i] = get_maximizing_r(mutilde, d_noise, Qeig) } ggplot(data.frame(best_r = best_r_vec, index = 1:p)) +     geom_point(aes(x = index, y = best_r))"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"make-an-example-with-the-perfect-binary-tree","dir":"Articles","previous_headings":"Simulations","what":"Make an example with the perfect binary tree","title":"Simulation examples for MPQ distances","text":"","code":"k = 8 p = 2^k tr = ape::stree(n = 2^k, type = \"balanced\") tr$edge.length = rep(1, nrow(tr$edge)) Q = ape::vcv(tr) Qeig = eigen(Q) clades = Descendants(tr) best_r_vec = numeric(length(clades)) clade_sizes = numeric(length(clades)) for(i in 1:length(clades)) {     mu = 1:p %in% clades[[i]]     mu = mu / sqrt(sum(mu^2))     mutilde = convert_to_tree_basis(mu, Qeig)     ##d_noise = c(rep(0, p/2), rep(1, p/2)) + .01     ##d_noise = Qeig$values^(-2) / sum(Qeig$values^(-2))     d_noise = rep(1, p)     d_noise = d_noise / sum(d_noise)     best_r_vec[i] = get_maximizing_r(mutilde, d_noise, Qeig)     clade_sizes[i] = length(clades[[i]]) } p_perfect = ggplot(data.frame(best_r = best_r_vec, clade_fraction = clade_sizes / p)) +     scale_x_log10() +     xlab(\"Clade fraction\") +     ylab(\"Best r\") +     geom_point(aes(x = clade_fraction, y = best_r))"},{"path":"https://jfukuyama.github.io/mpqDist/articles/simulations.html","id":"same-as-above-but-with-the-gentry-tree","dir":"Articles","previous_headings":"Simulations","what":"Same as above but with the Gentry tree","title":"Simulation examples for MPQ distances","text":"code use writing paper, evaluated compiled version.","code":"tr = phy_tree(gentry) p = ntaxa(gentry) Q = ape::vcv(tr) Qeig = eigen(Q) clades = Descendants(tr) best_r_vec = numeric(length(clades)) clade_sizes = numeric(length(clades)) time_since_divergence_of_mrca = numeric(length(clades)) names = character(length(clades)) tree_height = Q[1,1] for(i in 1:length(clades)) {     if(length(clades[[i]]) > 1) {         mrca = getMRCA(tr, clades[[i]])         name = \"\"     } else {         mrca = clades[[i]]         name = tr$tip.label[mrca]     }     parent_of_mrca = tr$edge[which(tr$edge[,2] == mrca),1]      mu = 1:p %in% clades[[i]]     mu = mu / sqrt(sum(mu^2))     mutilde = convert_to_tree_basis(mu, Qeig)     d_noise = rep(1, p)     d_noise = d_noise / sum(d_noise)     best_r_vec[i] = get_maximizing_r(mutilde, d_noise, Qeig)     clade_sizes[i] = length(clades[[i]])     names[i] = name     if(length(parent_of_mrca) > 0) {         time_since_divergence_of_mrca[i] = tree_height - adephylo::distRoot(tr, parent_of_mrca)     } else{         time_since_divergence_of_mrca[i] = 0     } } p_gentry =     ggplot(data.frame(best_r = best_r_vec, clade_fraction = clade_sizes / p)) +     geom_point(aes(x = clade_fraction, y = best_r)) +     scale_x_log10() +     xlab(\"Clade fraction\") +     ylab(\"Best r\") +     stat_smooth(aes(x = clade_fraction, y = best_r), method = \"gam\",  se = FALSE)  size_one_df = subset(data.frame(best_r = best_r_vec,                                 time_since_divergence_of_mrca,                                 clade_sizes,                                 name = names),                      clade_sizes == 1) size_one_df$Group = as.vector(tax_table(gentry)[,\"group\"]) size_one_df$Group[is.na(size_one_df$Group)] = \"Angiosperms\" size_one_df$Order = as.vector(tax_table(gentry)[,\"order\"]) size_one_df |>     group_by(Order)|>     summarise(mean_best_r = round(mean(best_r), digits = 2), num_species = length(best_r)) |>     arrange(desc(mean_best_r)) |>     head(n = 12) |>     knitr::kable(format = \"latex\") ##orders_to_label = table(size_one_df$Order) |> sort(decreasing = TRUE) |> names() |> head() orders_to_label = c(\"Pinales\", \"Ranunculales\", \"Gentianales\", \"Fagales\", \"Alismatales\", \"Sapindales\", \"Malpighiales\") size_one_df$Order[!(size_one_df$Order %in% orders_to_label)] = NA leaf_positions = get_leaf_position(phy_tree(gentry), ladderize = FALSE) size_one_df_with_position = merge(size_one_df, leaf_positions, by.x = \"name\", by.y = \"OTU\") tr_plot = plot_tree(tr, ladderize = FALSE) + coord_flip() +     scale_x_reverse() +     theme(panel.border = element_blank()) manual_palette = c(scales::hue_pal()(7), \"gray\") names(manual_palette) = c(orders_to_label, \"Other\") best_r_plot =     ggplot(size_one_df_with_position)+     geom_point(aes(y = best_r, x = otu.pos, color = fct_explicit_na(Order, na_level = \"Other\")), size = .7) +     xlab(\"\") +     theme(axis.ticks.x = element_blank(),           axis.text.x = element_blank(),           panel.border = element_blank()) +     ylab(\"Best r\") +     scale_color_manual(values = manual_palette, \"Order\") +     coord_cartesian(clip = \"off\") best_r_plot_with_braces = best_r_plot +     stat_brace(aes(x = otu.pos, y =0, color = Group, label = Group),width = .05, bending=3, distance = .03, rotate = 180) +     stat_bracetext(aes(x = otu.pos, y =0, color = Group, label = Group), distance = .08, rotate = 180) +     theme(legend.position = \"none\")  best_r_legend = cowplot::get_legend(best_r_plot) best_r_and_tree_plot = combine_plot_and_tree(best_r_plot_with_braces, tr_plot, tree.height = 3) p_size_one = ggplot(size_one_df) +     geom_point(aes(x = time_since_divergence_of_mrca, y = best_r, shape = Group), na.rm = TRUE) +     scale_shape(na.translate = FALSE) + ylab(\"Best r\") + xlab(\"Distance to parent node\") +     ggtitle(\"Individual species in Gentry dataset tree\") pdf(\"best-r-by-clade-size.pdf\", width = 7, height=2.3) p_perfect + p_gentry dev.off() pdf(\"best-r-singletons-with-tree.pdf\", width = 5.8, height = 3) best_r_and_tree_plot |> plot() dev.off() pdf(\"best-r-order-legend.pdf\", width = 1.2, height = 3) plot(best_r_legend) dev.off()"},{"path":"https://jfukuyama.github.io/mpqDist/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Julia Fukuyama. Author, maintainer.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fukuyama J (2025). mpqDist: MPQ distance computations. R package version 0.0.0.9000, https://jfukuyama.github.io/mpqDist/.","code":"@Manual{,   title = {mpqDist: MPQ distance computations},   author = {Julia Fukuyama},   year = {2025},   note = {R package version 0.0.0.9000},   url = {https://jfukuyama.github.io/mpqDist/}, }"},{"path":"https://jfukuyama.github.io/mpqDist/index.html","id":"overview","dir":"","previous_headings":"","what":"MPQ distance computations","title":"MPQ distance computations","text":"mpqDist R package computing family phylogenetically-informed distances making interactive plots based . MPQ distances family distance continuous tuning parameter controls extent distance influenced basal vs. terminal phylogenetic structure. package allows user give template plot filled full spectrum tuning parameters. Given template, package uses plotly create interactive plot allows user scan versions plot filled members family.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"MPQ distance computations","text":"package can installed using devtools::install_github('jfukuyama/mpqDist').","code":""},{"path":"https://jfukuyama.github.io/mpqDist/index.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"MPQ distance computations","text":"Vignettes showing simulations real data analysis available vignettes folder. Compiled html documents vignettes available docs. time, html documents need downloaded machine (github doesn’t display nicely), self-contained downloaded can see figures interactive plots created vignettes. can also install package run vignette(package = \"mpqDist\") see vignettes. example, one vignettes called gentry, can accessed using vignette(\"gentry\", package = \"mpqDist\").","code":""},{"path":"https://jfukuyama.github.io/mpqDist/readme.html","id":null,"dir":"","previous_headings":"","what":"Overview","title":"Overview","text":"mpqDist R package computing family phylogenetically-informed distances making interactive plots based . MPQ distances family distance continuous tuning parameter controls extent distance influenced basal vs. terminal phylogenetic structure. package allows user give template plot filled full spectrum tuning parameters. Given template, package uses plotly create interactive plot allows user scan versions plot filled members family.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/readme.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Overview","text":"package can installed using devtools::install_github('jfukuyama/mpqDist').","code":""},{"path":"https://jfukuyama.github.io/mpqDist/readme.html","id":"vignettes","dir":"","previous_headings":"","what":"Vignettes","title":"Overview","text":"Vignettes showing simulations real data analysis available vignettes folder. Compiled html documents vignettes available docs. time, html documents need downloaded machine (github doesn’t display nicely), self-contained downloaded can see figures interactive plots created vignettes. can also install package run vignette(package = \"mpqDist\") see vignettes. example, one vignettes called gentry, can accessed using vignette(\"gentry\", package = \"mpqDist\").","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_avg_distances_to_set.html","id":null,"dir":"Reference","previous_headings":"","what":"Average distance between each individual point and a set of base samples — get_avg_distances_to_set","title":"Average distance between each individual point and a set of base samples — get_avg_distances_to_set","text":"Average distance individual point set base samples","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_avg_distances_to_set.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Average distance between each individual point and a set of base samples — get_avg_distances_to_set","text":"","code":"get_avg_distances_to_set(d_obj, base_samples, sample_data = NULL)"},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_avg_distances_to_set.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Average distance between each individual point and a set of base samples — get_avg_distances_to_set","text":"d_obj distance object describing distances samples base_samples samples others measured. sample_data (optional) Extra data can added data frame containing average distances. Useful want plot average distances covariates.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_avg_distances_to_set.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Average distance between each individual point and a set of base samples — get_avg_distances_to_set","text":"data frame one column containing average distances sample base samples. Specifically, sample , average distance sum_bs base_samples d(, bs) / |base_samples|. Remaining columns data frame sample names sample_data (provided.)","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_mpq_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Compute MPQr distances for a range of values of r — get_mpq_distances","title":"Compute MPQr distances for a range of values of r — get_mpq_distances","text":"Compute MPQr distances range values r","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_mpq_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Compute MPQr distances for a range of values of r — get_mpq_distances","text":"","code":"get_mpq_distances(X, tr, rvec = r_transform(0:100/100))"},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_mpq_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Compute MPQr distances for a range of values of r — get_mpq_distances","text":"X \\(n \\times p\\) data matrix. tr tree (class phylo) p leaves.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_mpq_distances.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Compute MPQr distances for a range of values of r — get_mpq_distances","text":"list containing distances rows X, value \\(r\\) used (r).","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/get_mpq_distances.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Compute MPQr distances for a range of values of r — get_mpq_distances","text":"","code":"data(AntibioticSmall) #> Warning: data set ‘AntibioticSmall’ not found out.agpca = adaptivegpca(AntibioticSmall$X, AntibioticSmall$Q, k = 2) #> Error in adaptivegpca(AntibioticSmall$X, AntibioticSmall$Q, k = 2): could not find function \"adaptivegpca\""},{"path":"https://jfukuyama.github.io/mpqDist/reference/make_animation_df.html","id":null,"dir":"Reference","previous_headings":"","what":"Sets up a data frame for plotly to make an animation — make_animation_df","title":"Sets up a data frame for plotly to make an animation — make_animation_df","text":"Sets data frame plotly make animation","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/make_animation_df.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Sets up a data frame for plotly to make an animation — make_animation_df","text":"","code":"make_animation_df(mpq_distances, fn, means_and_vars = NULL, ...)"},{"path":"https://jfukuyama.github.io/mpqDist/reference/make_animation_df.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Sets up a data frame for plotly to make an animation — make_animation_df","text":"fn function apply distance objects creates data frame variables animation. first argument distance object. example, get_avg_distances_to_set. ... Extra arguments passed fn. distance_list list distance objects, example, distance element output get_mpq_distances.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/make_animation_df.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Sets up a data frame for plotly to make an animation — make_animation_df","text":"data frame one column called frame (can used ggplot2 plotly make animation).","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/mpq_and_sample_distances.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates a data frame containing MPQr and sample distances — mpq_and_sample_distances","title":"Creates a data frame containing MPQr and sample distances — mpq_and_sample_distances","text":"Creates data frame containing MPQr sample distances","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/mpq_and_sample_distances.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates a data frame containing MPQr and sample distances — mpq_and_sample_distances","text":"","code":"mpq_and_sample_distances(d_obj, sample_distances)"},{"path":"https://jfukuyama.github.io/mpqDist/reference/mpq_and_sample_distances.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates a data frame containing MPQr and sample distances — mpq_and_sample_distances","text":"sample_distances distance object containing distances samples. mpqr_distances distance object containing MPQr distances samples.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_all_pairs.html","id":null,"dir":"Reference","previous_headings":"","what":"Creates an animated plot of MPQ distances against some other measure of distance between sites — plot_all_pairs","title":"Creates an animated plot of MPQ distances against some other measure of distance between sites — plot_all_pairs","text":"Creates animated plot MPQ distances measure distance sites","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_all_pairs.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Creates an animated plot of MPQ distances against some other measure of distance between sites — plot_all_pairs","text":"","code":"plot_all_pairs(physeq, sample_distances, return_ggplot = FALSE, ...)"},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_all_pairs.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Creates an animated plot of MPQ distances against some other measure of distance between sites — plot_all_pairs","text":"physeq phyloseq object. return_ggplot TRUE, function return ggplot object can made animated plot calling ggplotly ggplot object. FALSE, function create animated plot. option returning ggplot object primarily allow customization user. distance_variables Names columns sample_data(physeq) use compute distances distance_fn function takes matrix computes distances pairs rows. return object class 'dist'.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_all_pairs.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Creates an animated plot of MPQ distances against some other measure of distance between sites — plot_all_pairs","text":"Either animated plot created ggplotly (return_ggplot = FALSE) ggplot object (return_ggplot = TRUE)","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_dist_to_reference_samples.html","id":null,"dir":"Reference","previous_headings":"","what":"Makes an animated plot showing the the distances between each sample and a set of reference samples — plot_dist_to_reference_samples","title":"Makes an animated plot showing the the distances between each sample and a set of reference samples — plot_dist_to_reference_samples","text":"Makes animated plot showing distances sample set reference samples","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_dist_to_reference_samples.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Makes an animated plot showing the the distances between each sample and a set of reference samples — plot_dist_to_reference_samples","text":"","code":"plot_dist_to_reference_samples(   physeq,   reference_samples,   x_variable,   return_ggplot = FALSE,   ... )"},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_dist_to_reference_samples.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Makes an animated plot showing the the distances between each sample and a set of reference samples — plot_dist_to_reference_samples","text":"physeq phyloseq object containing abundances, phylogenetic tree, sample data reference_samples Either names indices set reference samples. x_variable variable plotting distances x axis. string giving name one columns sample_data(phy_seq). return_ggplot TRUE, function return ggplot object can made animated plot calling ggplotly ggplot object. FALSE, function create animated plot. option returning ggplot object primarily allow customization user. ... Extra objects passed aes_string ggplot.","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/plot_dist_to_reference_samples.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Makes an animated plot showing the the distances between each sample and a set of reference samples — plot_dist_to_reference_samples","text":"Either animated plot created ggplotly (return_ggplot = FALSE) ggplot object (return_ggplot = TRUE)","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/r_transform.html","id":null,"dir":"Reference","previous_headings":"","what":"A transformation that tends to work better than a linear grid between 0 and 1 — r_transform","title":"A transformation that tends to work better than a linear grid between 0 and 1 — r_transform","text":"transformation tends work better linear grid 0 1","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/r_transform.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"A transformation that tends to work better than a linear grid between 0 and 1 — r_transform","text":"","code":"r_transform(r)"},{"path":"https://jfukuyama.github.io/mpqDist/reference/r_transform.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"A transformation that tends to work better than a linear grid between 0 and 1 — r_transform","text":"r value 0 1","code":""},{"path":"https://jfukuyama.github.io/mpqDist/reference/r_transform.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"A transformation that tends to work better than a linear grid between 0 and 1 — r_transform","text":"Another value 0 1.","code":""}]
